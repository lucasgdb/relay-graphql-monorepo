type Query {
  auth: Auth!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  viewer: User!
}

type Auth {
  isLogged: Boolean!
  user: User
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  email: String!
  name: String!
  lastname: String!
  fullname: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationPayload

  """The logOut mutation can be used to log out an existing user."""
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  createUser(input: CreateUserMutationInput!): CreateUserMutationPayload
}

type LoginMutationPayload {
  jwtToken: String
  user: User
  clientMutationId: String
}

input LoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LogoutMutationPayload {
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type CreateUserMutationPayload {
  jwtToken: String
  user: User
  clientMutationId: String
}

input CreateUserMutationInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
  clientMutationId: String
}